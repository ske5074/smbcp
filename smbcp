#!/bin/sh
###
#   Copyright 2008 Sean Kennedy, University of Denver, sean@du.edu
#   This program is free software: you can redistribute it and/or modify#   it under the terms of the GNU General Public License as published by#   the Free Software Foundation, either version 3 of the License, or#   (at your option) any later version.##   This program is distributed in the hope that it will be useful,#   but WITHOUT ANY WARRANTY; without even the implied warranty of#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#   GNU General Public License for more details.##   You should have received a copy of the GNU General Public License#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
###
# smbcp
# 20060908 - Initial build
# 20070429 - beta 
# 20071025 - Updated /tmp/.smbcp-$$.out to /tmp/.smbcp-$DT-$$.out
# 20071025 - Added a PATH statement.

PATH=/usr/bin:/bin:/usr/local/bin:/usr/sfw/bin:/opt/sfw/bin
DT=`date +'%Y%m%d%H%M'`
TMPFILE="/tmp/.smbcp-$DT-$$.out"

f_usage()
{
   echo "Usage:"
   echo "   smbcp {-av} {source} {destination}"
   #echo "   smbcp {-amv} {source} {destination}"
   echo "      -a = Translate the specified file as a ascii text file."
   # echo "      -m = Move the file, the original will be deleted."
   echo "      -v = Verbose output."
   echo "      source|destination = {username}[%password]@{hostname}:{filename} | {filename} "
   echo "      The var SMBPASSWD can be used for the password."
   echo "      Example:"
   echo "         smbcp -a /tmp/wow.txt cair/bob.barker@winnt:/share/wow.txt"
   echo "         smbcp cair/bob.barker@winnt:/share/wow.zip /home/debi/wow.zip"
}

# Parse the command-line options...
while getopts 'I:amvh' option
do
   case "$option" in
   "I")	opt_I="$OPTARG"
        ;;
   "a")	opt_a="translate;"
        ;;
   #"m")	opt_m="1"
   #     ;;
   "v")	opt_v="1"
        ;;
   "h") f_usage
        exit 1
        ;;
   ?)	echo "`basename $0`: Bad option -${option} specified. Aborting."
        exit 1
        ;;
   esac
done
shift `expr $OPTIND - 1`

if [ "$#" -ne 2 ]; then
   f_usage
   exit 1
fi

# Check for source and destination network paths...
SRCNET=0
DESTNET=0
RESULT=`echo "$1" | grep ":" | grep "@"`
if [ "$?" -eq "0" ]; then
   # Source has a host in it's path... 
   SRCNET=1
fi
RESULT=`echo "$2" | grep ":" | grep "@"`
if [ "$?" -eq "0" ]; then
   # Destination has a host in it's path... 
   DESTNET=1
fi
RESULT=`echo $SRCNET + $DESTNET | bc`
if [ $RESULT -eq 0 ]; then
   # There's a problem - there's no net path...
   echo "Error: There must be 1 network path."
   exit 1
fi
if [ $RESULT -gt 1 ]; then
   # There's a problem - there's 2 net paths...
   echo "Error: There must be 1 network path."                                         
   exit 1
fi
 
# Parse the source and destination args...
if [ $SRCNET -eq 1 ]; then
   # The source is  a network location...
   NETARG="$1"
   LOCALFILE="$2"
else
   # Destination is a network location...
   NETARG="$2"
   LOCALFILE="$1"
   # Check and make sure the local file is good...
   if [ ! -f "$LOCALFILE" ]; then
      # The local file supplied is not valid. Abort...
      echo "Error: Unable to access the local file $LOCALFILE. Aborting."
      exit 1
   fi
fi

# Parse all the network information...
NETUSER=`echo "$NETARG" | cut -d "@" -f1`
NETHOST=`echo "$NETARG" | cut -d "@" -f2 | cut -d":" -f1`
NETSHARE=`echo "$NETARG" | cut -d ":" -f2 | cut -d "/" -f2`
NETDIR=/`echo "$NETARG" | cut -d ":" -f2 | cut -d "/" -f 3-`
NETFILE=`basename "$NETDIR"`
NETDIR=`dirname "$NETDIR"`

# Check for a passwd...
RESULT=`echo "$NETUSER" | grep "%"`
if [ "$?" -eq 0 ]; then
   # There's a password in the username. Process...
   NETPASSWD=`echo "$NETUSER" | cut -d "%" -f2`
   NETUSER=`echo "$NETUSER" | cut -d "%" -f1`
else
   # There's no password in the username - see if a SMBPASSWD var exists...
   if [ ! -z "$SMBPASSWD" ]; then
      # SMBPASSWD exists. Set the source passwd to it...
      NETPASSWD="$SMBPASSWD"
   else
      # So there's no password on the command line and
      # no SMBPASSWD defined.  Check for a global passwd for the user...
      PASSWDFILE="/etc/.smb.`echo "$NETUSER" | tr '\\\/' '__'`"
      if [ -r "$PASSWDFILE" ]; then
         NETPASSWD=`crypt hellothere < "$PASSWDFILE" 2> /dev/null`
      fi
   fi
fi

# echo USER - $NETUSER
# echo PASSWD - $NETPASSWD
# echo HOST - $NETHOST
# echo SHARE - $NETSHARE
# echo DIR - $NETDIR
# echo FILE - $NETFILE
# echo LOCALFILE - $LOCALFILE

# Process the request. Build the passwd and command vars...
USER="$NETUSER%$NETPASSWD" ; export USER
if [ "$SRCNET" -eq 1 ]; then
   # The source is a network location...
   SMBCOMMAND="prompt; $opt_a get $NETFILE $LOCALFILE"
   if [ "$opt_m" -eq 1 ]; then
      # The move flag was used. This would 
      # mean the user wants he source file removed.
      SMBCOMMAND="$SMBCOMMAND ; rename $NETFILE smbcp-done-$DT-$$-$NETFILE"
   fi
else
   # The destination is a network location...
   SMBCOMMAND="prompt; $opt_a put $LOCALFILE $NETFILE"
fi

# Execute the smbclient command...
smbclient "//$NETHOST/$NETSHARE" \
   -D "$NETDIR"  \
   -U "$NETUSER" \
   -N \
   -c "$SMBCOMMAND" > $TMPFILE 2>&1

# Now check to see of the command ran successfully...
ERRORLEVEL=$?
if [ $ERRORLEVEL -ne 0 ]; then
   # Something's wrong...
   echo "Error: smbclient exit status $ERRORLEVEL - See $TMPFILE for details"
   exit $ERRORLEVEL
fi

# Check the output for a failure...
NTERR=`cat $TMPFILE | grep "^NT_STATUS"`
if [ ! -z "$NTERR" ] ; then
   # Looks like there was a error on the smbclient command.
   # Report and abort further actions.
   echo "Error: $NTERR" 
   exit 1
fi

# So far so good.  We haven't detected any problems
# with the copy.  If the -m option was specified and
# the source file was local, then delete the file.
if [ "$DESTNET" -eq 1 -a "$opt_m" -eq 1 ]; then
   # The move flag was used. This would 
   # mean the user wants the source file removed.
   # mv "$LOCALFILE" "/tmp/.smbcp-done-$DT-$$-$LOCALFILE"
   rm "$LOCALFILE" 
   if [ "$?" -ne 0 ]; then
      # The rm command had problems...
      echo "Error: The smbclient was successful but rm $LOCALFILE failed."
      exit 1
   fi
fi
